#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'rbfSom'

puts "\n" + "*" * 80  + "\n" +
     " " * 20 + "Ejercicio 1" + " " * 20 + "\n" +
     " " * 20 + "    X-OR   " + " " * 20 + "\n" +
     "*" * 80 + "\n"

xor_path = 'xor.csv'
csv_xor = RbfSom::Csv.new(xor_path)

desviacion = 0.2
cantidad = 20
matrixPrueba1 = RbfSom::RandomCustomize.new(desviacion, cantidad, 1.0, 1.0,  nil, 1)
matrixPrueba2 = RbfSom::RandomCustomize.new(desviacion, cantidad, 1.0, -1.0, nil,  -1)
matrixPrueba3 = RbfSom::RandomCustomize.new(desviacion, cantidad, -1.0, 1.0, nil,  -1)
matrixPrueba4 = RbfSom::RandomCustomize.new(desviacion, cantidad, -1.0, -1.0,nil , 1)

patrones = matrixPrueba3.matrix +  matrixPrueba2.matrix +
           matrixPrueba1.matrix +  matrixPrueba4.matrix

patrones.shuffle!


desviacion = 0.2
cantidad = 20
matrixTest1 = RbfSom::RandomCustomize.new(desviacion, cantidad, 1.0, 1.0,  nil, 1)
matrixTest2 = RbfSom::RandomCustomize.new(desviacion, cantidad, 1.0, -1.0, nil,  -1)
matrixTest3 = RbfSom::RandomCustomize.new(desviacion, cantidad, -1.0, 1.0, nil,  -1)
matrixTest4 = RbfSom::RandomCustomize.new(desviacion, cantidad, -1.0, -1.0,nil , 1)

test = matrixTest1.matrix +  matrixTest2.matrix +
           matrixTest4.matrix +  matrixTest3.matrix

test.shuffle!

k = 4
rbfXor = RbfSom::Rbf.new(k, patrones, [k,1], 0.5)
rbfXor.calcular_centroides
rbfXor.entrenar
rbfXor.test(test)

puts "Xor Test: "
puts "El porcentaje de error es de #{rbfXor.errores}%."


#  iris   #

puts "\n" + "*" * 80  + "\n" +
     " " * 20 + "Iris" + " " * 20 + "\n" +
     "*" * 80 + "\n"

iris = 'iris.csv'
iris = RbfSom::Csv.new(iris)

patrones = iris.matrix.shuffle!
entrenamiento = patrones[0..80]
test = patrones[80..150]

kIris = 3
iris = RbfSom::Rbf.new(kIris, entrenamiento, [kIris, 1], 0.5)
iris.calcular_centroides
iris.entrenar
iris.test(test)

puts "Iris Test: "
puts "El porcentaje de error es de #{iris.errores * test.count / 100}%."

#p iris.pesosSalida
